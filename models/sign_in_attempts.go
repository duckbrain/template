// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/gofrs/uuid"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SignInAttempt is an object representing the database table.
type SignInAttempt struct {
	ID        uuid.UUID `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    uuid.UUID `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *signInAttemptR `boil:"" json:"" toml:"" yaml:""`
	L signInAttemptL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SignInAttemptColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperuuid_UUID struct{ field string }

func (w whereHelperuuid_UUID) EQ(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperuuid_UUID) NEQ(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperuuid_UUID) LT(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperuuid_UUID) LTE(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperuuid_UUID) GT(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperuuid_UUID) GTE(x uuid.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SignInAttemptWhere = struct {
	ID        whereHelperuuid_UUID
	UserID    whereHelperuuid_UUID
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperuuid_UUID{field: "\"sign_in_attempts\".\"id\""},
	UserID:    whereHelperuuid_UUID{field: "\"sign_in_attempts\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"sign_in_attempts\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"sign_in_attempts\".\"updated_at\""},
}

// SignInAttemptRels is where relationship names are stored.
var SignInAttemptRels = struct {
	User string
}{
	User: "User",
}

// signInAttemptR is where relationships are stored.
type signInAttemptR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*signInAttemptR) NewStruct() *signInAttemptR {
	return &signInAttemptR{}
}

// signInAttemptL is where Load methods for each relationship are stored.
type signInAttemptL struct{}

var (
	signInAttemptAllColumns            = []string{"id", "user_id", "created_at", "updated_at"}
	signInAttemptColumnsWithoutDefault = []string{"id", "user_id", "created_at", "updated_at"}
	signInAttemptColumnsWithDefault    = []string{}
	signInAttemptPrimaryKeyColumns     = []string{"id"}
)

type (
	// SignInAttemptSlice is an alias for a slice of pointers to SignInAttempt.
	// This should generally be used opposed to []SignInAttempt.
	SignInAttemptSlice []*SignInAttempt
	// SignInAttemptHook is the signature for custom SignInAttempt hook methods
	SignInAttemptHook func(context.Context, boil.ContextExecutor, *SignInAttempt) error

	signInAttemptQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	signInAttemptType                 = reflect.TypeOf(&SignInAttempt{})
	signInAttemptMapping              = queries.MakeStructMapping(signInAttemptType)
	signInAttemptPrimaryKeyMapping, _ = queries.BindMapping(signInAttemptType, signInAttemptMapping, signInAttemptPrimaryKeyColumns)
	signInAttemptInsertCacheMut       sync.RWMutex
	signInAttemptInsertCache          = make(map[string]insertCache)
	signInAttemptUpdateCacheMut       sync.RWMutex
	signInAttemptUpdateCache          = make(map[string]updateCache)
	signInAttemptUpsertCacheMut       sync.RWMutex
	signInAttemptUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var signInAttemptBeforeInsertHooks []SignInAttemptHook
var signInAttemptBeforeUpdateHooks []SignInAttemptHook
var signInAttemptBeforeDeleteHooks []SignInAttemptHook
var signInAttemptBeforeUpsertHooks []SignInAttemptHook

var signInAttemptAfterInsertHooks []SignInAttemptHook
var signInAttemptAfterSelectHooks []SignInAttemptHook
var signInAttemptAfterUpdateHooks []SignInAttemptHook
var signInAttemptAfterDeleteHooks []SignInAttemptHook
var signInAttemptAfterUpsertHooks []SignInAttemptHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SignInAttempt) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SignInAttempt) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SignInAttempt) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SignInAttempt) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SignInAttempt) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SignInAttempt) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SignInAttempt) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SignInAttempt) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SignInAttempt) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signInAttemptAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSignInAttemptHook registers your hook function for all future operations.
func AddSignInAttemptHook(hookPoint boil.HookPoint, signInAttemptHook SignInAttemptHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		signInAttemptBeforeInsertHooks = append(signInAttemptBeforeInsertHooks, signInAttemptHook)
	case boil.BeforeUpdateHook:
		signInAttemptBeforeUpdateHooks = append(signInAttemptBeforeUpdateHooks, signInAttemptHook)
	case boil.BeforeDeleteHook:
		signInAttemptBeforeDeleteHooks = append(signInAttemptBeforeDeleteHooks, signInAttemptHook)
	case boil.BeforeUpsertHook:
		signInAttemptBeforeUpsertHooks = append(signInAttemptBeforeUpsertHooks, signInAttemptHook)
	case boil.AfterInsertHook:
		signInAttemptAfterInsertHooks = append(signInAttemptAfterInsertHooks, signInAttemptHook)
	case boil.AfterSelectHook:
		signInAttemptAfterSelectHooks = append(signInAttemptAfterSelectHooks, signInAttemptHook)
	case boil.AfterUpdateHook:
		signInAttemptAfterUpdateHooks = append(signInAttemptAfterUpdateHooks, signInAttemptHook)
	case boil.AfterDeleteHook:
		signInAttemptAfterDeleteHooks = append(signInAttemptAfterDeleteHooks, signInAttemptHook)
	case boil.AfterUpsertHook:
		signInAttemptAfterUpsertHooks = append(signInAttemptAfterUpsertHooks, signInAttemptHook)
	}
}

// One returns a single signInAttempt record from the query.
func (q signInAttemptQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SignInAttempt, error) {
	o := &SignInAttempt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sign_in_attempts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SignInAttempt records from the query.
func (q signInAttemptQuery) All(ctx context.Context, exec boil.ContextExecutor) (SignInAttemptSlice, error) {
	var o []*SignInAttempt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SignInAttempt slice")
	}

	if len(signInAttemptAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SignInAttempt records in the query.
func (q signInAttemptQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sign_in_attempts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q signInAttemptQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sign_in_attempts exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *SignInAttempt) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (signInAttemptL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSignInAttempt interface{}, mods queries.Applicator) error {
	var slice []*SignInAttempt
	var object *SignInAttempt

	if singular {
		object = maybeSignInAttempt.(*SignInAttempt)
	} else {
		slice = *maybeSignInAttempt.(*[]*SignInAttempt)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &signInAttemptR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &signInAttemptR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(signInAttemptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SignInAttempts = append(foreign.R.SignInAttempts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SignInAttempts = append(foreign.R.SignInAttempts, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the signInAttempt to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SignInAttempts.
func (o *SignInAttempt) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sign_in_attempts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, signInAttemptPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &signInAttemptR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SignInAttempts: SignInAttemptSlice{o},
		}
	} else {
		related.R.SignInAttempts = append(related.R.SignInAttempts, o)
	}

	return nil
}

// SignInAttempts retrieves all the records using an executor.
func SignInAttempts(mods ...qm.QueryMod) signInAttemptQuery {
	mods = append(mods, qm.From("\"sign_in_attempts\""))
	return signInAttemptQuery{NewQuery(mods...)}
}

// FindSignInAttempt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSignInAttempt(ctx context.Context, exec boil.ContextExecutor, iD uuid.UUID, selectCols ...string) (*SignInAttempt, error) {
	signInAttemptObj := &SignInAttempt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sign_in_attempts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, signInAttemptObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sign_in_attempts")
	}

	return signInAttemptObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SignInAttempt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sign_in_attempts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(signInAttemptColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	signInAttemptInsertCacheMut.RLock()
	cache, cached := signInAttemptInsertCache[key]
	signInAttemptInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			signInAttemptAllColumns,
			signInAttemptColumnsWithDefault,
			signInAttemptColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(signInAttemptType, signInAttemptMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(signInAttemptType, signInAttemptMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sign_in_attempts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sign_in_attempts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sign_in_attempts")
	}

	if !cached {
		signInAttemptInsertCacheMut.Lock()
		signInAttemptInsertCache[key] = cache
		signInAttemptInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SignInAttempt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SignInAttempt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	signInAttemptUpdateCacheMut.RLock()
	cache, cached := signInAttemptUpdateCache[key]
	signInAttemptUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			signInAttemptAllColumns,
			signInAttemptPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sign_in_attempts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sign_in_attempts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, signInAttemptPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(signInAttemptType, signInAttemptMapping, append(wl, signInAttemptPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sign_in_attempts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sign_in_attempts")
	}

	if !cached {
		signInAttemptUpdateCacheMut.Lock()
		signInAttemptUpdateCache[key] = cache
		signInAttemptUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q signInAttemptQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sign_in_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sign_in_attempts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SignInAttemptSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signInAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sign_in_attempts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, signInAttemptPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in signInAttempt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all signInAttempt")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SignInAttempt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sign_in_attempts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(signInAttemptColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	signInAttemptUpsertCacheMut.RLock()
	cache, cached := signInAttemptUpsertCache[key]
	signInAttemptUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			signInAttemptAllColumns,
			signInAttemptColumnsWithDefault,
			signInAttemptColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			signInAttemptAllColumns,
			signInAttemptPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sign_in_attempts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(signInAttemptPrimaryKeyColumns))
			copy(conflict, signInAttemptPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sign_in_attempts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(signInAttemptType, signInAttemptMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(signInAttemptType, signInAttemptMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sign_in_attempts")
	}

	if !cached {
		signInAttemptUpsertCacheMut.Lock()
		signInAttemptUpsertCache[key] = cache
		signInAttemptUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SignInAttempt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SignInAttempt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SignInAttempt provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), signInAttemptPrimaryKeyMapping)
	sql := "DELETE FROM \"sign_in_attempts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sign_in_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sign_in_attempts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q signInAttemptQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no signInAttemptQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sign_in_attempts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sign_in_attempts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SignInAttemptSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(signInAttemptBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signInAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sign_in_attempts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, signInAttemptPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from signInAttempt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sign_in_attempts")
	}

	if len(signInAttemptAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SignInAttempt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSignInAttempt(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SignInAttemptSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SignInAttemptSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signInAttemptPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sign_in_attempts\".* FROM \"sign_in_attempts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, signInAttemptPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SignInAttemptSlice")
	}

	*o = slice

	return nil
}

// SignInAttemptExists checks if the SignInAttempt row exists.
func SignInAttemptExists(ctx context.Context, exec boil.ContextExecutor, iD uuid.UUID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sign_in_attempts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sign_in_attempts exists")
	}

	return exists, nil
}

type CreateSignInAttemptPayload struct {
	Items []*SignInAttempt
}

func (p CreateSignInAttemptPayload) Item() *SignInAttempt {
	if len(p.Items) > 0 {
		return p.Items[0]
	}
	return nil
}

func (p CreateSignInAttemptPayload) ID() *uuid.UUID {
	item := p.Item()
	if item == nil {
		return nil
	}
	return &item.ID
}

func (r *Repository) CreateSignInAttempts(ctx context.Context, input []*SignInAttempt) (*CreateSignInAttemptPayload, error) {
	res := make([]*SignInAttempt, 0, len(input))
	for _, m := range input {
		if m.ID == uuid.Nil {
			var err error
			m.ID, err = uuid.NewV4()
			if err != nil {
				return nil, err
			}
		}
		err := m.Insert(ctx, r.DB(ctx), boil.Infer())
		if err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	return &CreateSignInAttemptPayload{Items: res}, nil
}

type UpdateSignInAttemptPayload struct {
	Items []*SignInAttempt
}

func (p UpdateSignInAttemptPayload) Item() *SignInAttempt {
	if len(p.Items) > 0 {
		return p.Items[0]
	}
	return nil
}

func (r *Repository) UpdateSignInAttempts(ctx context.Context, input []*SignInAttempt) (*UpdateSignInAttemptPayload, error) {
	res := make([]*SignInAttempt, 0, len(input))
	for _, m := range input {
		_, err := m.Update(ctx, r.DB(ctx), boil.Infer())

		if err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	return &UpdateSignInAttemptPayload{Items: res}, nil
}

type DeleteSignInAttemptPayload struct {
	IDs []uuid.UUID
}

func (p DeleteSignInAttemptPayload) ID() *uuid.UUID {
	if len(p.IDs) > 0 {
		return &p.IDs[0]
	}
	return nil
}

func (r *Repository) DeleteSignInAttempts(ctx context.Context, input []uuid.UUID) (*DeleteSignInAttemptPayload, error) {
	res := make([]uuid.UUID, 0, len(input))
	for _, id := range input {
		_, err := (&SignInAttempt{ID: id}).Delete(ctx, r.DB(ctx))

		if err != nil {
			return nil, err
		}
		res = append(res, id)
	}
	return &DeleteSignInAttemptPayload{IDs: res}, nil
}

func (r *Repository) SignInAttempts(ctx context.Context, filter SignInAttemptFilter) ([]*SignInAttempt, error) {
	// TODO Apply filters
	return SignInAttempts().All(ctx, r.DB(ctx))
}
